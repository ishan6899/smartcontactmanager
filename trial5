import {Component, ElementRef, Input, ViewChild} from '@angular/core';
import * as d3 from 'd3'
import { Network, DataSet } from 'vis';


interface Node {
  id: number|string;
  name: string;
  parents: number[];
  children: number[];
}




@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  nodes: Node[] = [
    {id: 1, name: 'Parent 1', parents: [], children: [3]},
    {id: 2, name: 'Parent 2', parents: [], children: [3, 4]},
    {id: 3, name: 'Child 1', parents: [1, 2], children: [5]},
    {id: 4, name: 'Child 2', parents: [2], children: []},
    {id: 5, name: 'Child 3', parents: [3], children: []},
  ];
  links = [
    {source: 0, target: 2},
    {source: 1, target: 2},
    {source: 1, target: 3},
    {source: 2, target: 4}
  ]
  @ViewChild('graph', {static: true})
  private graph!:any;

  ngOnInit() {
    const container = this.graph.nativeElement;
    const nodes = ([
      {id: 1, label: 'Node 1',hello:1},
      {id: 2, label: 'Node 2'},
      {id: 3, label: 'Node 3'},
      {id: 4, label: 'Node 4'},
      {id: 5, label: 'Node 5'},
      {id: 6, label: 'Node 6'}

    ]);

    const edges = new DataSet<any>([
      {from: 1, to: 3},

      {from: 1, to: 2},
      {from: 2, to: 4},
      {from: 2, to: 5},
      {from:6,to:2}
    ]);
    const data = { nodes, edges };
    const options = {
      nodes: {
        font: {
          size: 22
        },
        borderWidth: 3
      },
      edges: {
        font: {
          align: "top"
        },
        smooth: {
          type: "dynamic",
          forceDirection: "horizontal",
          roundness: 0.0
        },
        arrows: {
          to: { enabled: true, scaleFactor: 1, type: "arrow" }
        }
      },
      layout: {
        hierarchical: {
          direction: "LR",
          sortMethod: 'directed'
        }
      },
      interaction: {
        tooltipDelay: 200,
        hover: true
      },
      physics: {
        "barnesHut": {
          "springConstant": 0,
          "avoidOverlap": 0.2
        }
      }
    };
    this.graph = new Network(container, <any>data, <any>options);
// Compute the distinct nodes from the links.

  }
}
